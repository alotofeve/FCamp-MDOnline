/*
*  "#" ===> optional
*/


PatientController: 

Login:
/POST  
INPUT {
  username: String
  password: String
}
OUTPUT{
  isLoggedin: Boolean
}

  
Patient Register: 
/POST   "/patientRegister"
INPUT{
  username: String
  password: String
  male: String
  date of birth: String
  insurance: Boolean
  email: String
  phone: String
  mailiing address: String
  # payment method: String
}
OUTPUT {
  isRegistered: Boolean
}



GetProfile: 
/GET "/getPatientProfile"
INPUT{
  None
}
OUTPUT{
  username: String
  password: String
  male: String
  date of birth: String
  insurance: Boolean
  email: String
  phone: String
  mailiing address: String
  # payment method: String
  appointments: List<E>
  # preferedDoctor: List<String>
  #likedLecture: List<E>
}


UpdateProfile:
/POST "/updatePatientProfile"
Input{
###
  username: String
  password: String
  male: String
  date of birth: String
  insurance: Boolean
  email: String
  phone: String
  mailiing address: String
  # payment method: String
###
}
OUTPUT{
  isUpdated: Boolean
}
#DeleteProfile:
/POST "/deletePatientProfile"
INPUT{
}
OUTPUT{
  isDeleted: Boolean
}


DoctorController:
Login:
/POST  
INPUT {
  username: String
  password: String
}
OUTPUT{
  isLoggedin: Boolean
}

Doctor Register: 
/POST "doctorRegister"
INPUT{
  username: String
  password: String
  male: String
  date of birth: String
  email: String
  phone: String
  mailiing address: String
  dotcor license: String
}

GetProfile: 
/GET "/getDcotorProfile"
INPUT{
  None
}
OUTPUT{
 username: String
  password: String
  male: String
  date of birth: String
  email: String
  phone: String
  mailiing address: String
  dotcor license: String
  appointments: List<E>
}

UpdateProfile:
/POST "/updateDoctorProfile"
Input{
###
  username: String
  password: String
  male: String
  date of birth: String
  email: String
  phone: String
  mailiing address: String
  dotcor license: String
  appointments: List<E>
  availableDates: List<String>
###
}
OUTPUT{
  isUpdated: Boolean
}

#DeleteProfile:
/POST "/deleteDoctorProfile"
INPUT{
}
OUTPUT{
  isDeleted: Boolean
}

Patient:

@postmapping("registerPatient")
@ResponseStatus(value = HttpStatus.OK)
void registerPatient(@RequestBody RegisterPatientBody body) {}

@getmapping("getPatientProfile")
patientEntity getPatientProfile(@AuthenticationPrincipal User user){}

@putmapping("updatePatientProfile")
@ResponseStatus(value = HttpStatus.OK)
void updatePatientProfile(@AuthenticationPrincipal User user, @RequestBody RegisterPatientBody body){

}

@deletemapping("deletePatientProfile")
@ResponseStatus(value = HttpStatus.OK)
void deletePatientProfile(@AuthenticationPrincipal User user){
}

Doctor:

@postmapping("registerDoctor")
@ResponseStatus(value = HttpStatus.OK)
void registerDoctor(@RequestBody RegisterDoctorBody body) {}

@getmapping("getDoctorProfile")
patientEntity getDoctorProfile(@AuthenticationPrincipal User user){}

@putmapping("updateDoctorProfile")
void updateDoctorProfile(@AuthenticationPrincipal User user, @RequestBody RegisterDoctorBody body){
  
}

@deletemapping("deleteDoctorProfile")
@ResponseStatus(value = HttpStatus.OK)
void deleteDoctorProfile(@AuthenticationPrincipal User user){
}

@postmapping("setAvailableTime")
@ResponseStatus(value = HttpStatus.OK)
void setAvailableTime(@AuthenticationPrincipal User user, @Requestbody List<String> availableTimes){
}

@getmapping("getAllAvailableTimes")
List<AvailaleTimeEntity> getAllAvailableTimes(@AuthenticationPrincipal User user){
  return List<AvailanleTimeEntity>  availableTimes
 }
 
 @putmapping("updateCertainAvailableTime")
 @ResponseStatus(value = HttpStatus.OK)
 void updateCertainAvailableTime(@AuthenticationPrincipal User user, @RequestParam("available_time_id") String availableTimeID, @RequestParam("is_available") boolean isAvailable){
 }

